AWSTemplateFormatVersion: 2010-09-09

Description: TK AWS CloudFormation SNS/SQS Stack

Parameters: {}

Mappings: {}

Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join [ '-', [ !Ref AWS::StackName, VPC ] ]

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join [ '-', [ !Ref AWS::StackName, IGW ] ]

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join [ '-', [ !Ref AWS::StackName, PublicRouteTable ] ]

  RouteGlobal:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join [ '-', [ !Ref AWS::StackName, PublicSubnet ] ]

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicMachineProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - 'TK_FullAccessRoleS3'

  PublicMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0747bdcabd34c712a
      InstanceType: t2.micro
      IamInstanceProfile: !Ref PublicMachineProfile
      KeyName: tk_ssh_key
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SSHIngressTrafficFromOutsideSecurityGroup
            - !Ref HTTPIngressTrafficFromOutsideSecurityGroup
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join [ '-', [ !Ref AWS::StackName, PublicMachine ] ]
      UserData:
        Fn::Base64: !Sub
        - |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          apt-get -y update
          apt-get -y install awscli git virtualenv

          su - ubuntu -c 'cat > env.sh' << EOF
            export S3_BUCKET="${s3_bucket}"
          EOF

          su - ubuntu -c 'cat >> .bashrc' << EOF
            source env.sh
          EOF

          su - ubuntu -c '
            source env.sh

            if [[ ! -d aws_basics ]]; then
              git clone https://github.com/bananarepublic/aws_basics.git
            fi
            cd aws_basics/8_sns_sqs
            git pull origin master

            virtualenv env  --python=python3 --system-site-packages
            source env/bin/activate
            pip install -r requirements.txt
            python server.py &
          '

        - s3_bucket: !Ref S3Bucket

  SSHIngressTrafficFromOutsideSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow SSH ingress traffic from outside
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 37.214.0.0/16

  HTTPIngressTrafficFromOutsideSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP ingress traffic from outside
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8888'
          ToPort: '8888'
          CidrIp: 0.0.0.0/0

  AllIngressTrafficInsideVPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow all ingress traffic inside VPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: 10.0.0.0/16

  S3Bucket:
    Type: 'AWS::S3::Bucket'

Outputs: {}
